#!/usr/bin/env bash

# License:
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later
#   version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this program.  If not, see
#   <https://www.gnu.org/licenses/>.
#
## You can redistribute it as you wish : GPL v3
## author : wildtruc@noneltd.net

## this script have to be launch with user's session started.

set -e
# check if root and exit if not
if [[ $EUID -ne 0 ]]; then
  printf 'Script must be executed as root or sudo :\n'
## using polkit to set admin rights.
  exit 1
fi

install_dir='/etc/nvidia-prime'
nvidia32_lib_file='/etc/ld.so.conf.d/nvidia-lib32.conf'
nvidia64_lib_file='/etc/ld.so.conf.d/nvidia-lib64.conf'
conf=$1
## Default Fedora propriatary driver dirs.
nv_drv_32='/usr/lib/nvidia'
nv_drv_64='/usr/lib64/nvidia'
nv_xorg_path='/usr/lib64/nvidia/xorg'
## check any custom dirs for nvidia librairies linking
if [[ -s $install_dir/library.conf ]]; then
	## TODO Here special distro library config could take place.
	## test library conf content before loading.
	if [ $(cat $install_dir/library.conf| sed -En "s/^(.*)='(.*)'$/\2/g;p"| grep -c .) -gt 0 ]; then
		. $install_dir/library.conf
	fi
fi
## default options (have to be manual set/reset in options.conf of by nvidia-prime-ui)
delay=5
intel_nodelay=1
cfg_grub=1
cfg_modeset=1
nv_modeset=0

if [[ -s $install_dir/options.conf ]]; then
	. $install_dir/options.conf
fi
current_display=$(xrandr --current| grep "connected"| grep "[0-9]\{3,4\}[x]"| sed -n "s/\ (.*$//p")
connected_display=( "$(xrandr --current| grep -w "connected"| sed -En "s|^(.*)\ (\(.*)$|\1|p")" )

## FIXME ?
## grub section have to be filtered in case of distros specifics.
grub_config(){
	if [ $cfg_grub -gt 0 ]; then
		## look at /proc/version to detect distro variant.
		boot_key='/boot/vmlinuz-'$(uname -r)
		modeset_check=$(cat /boot/grub2/grub.cfg| egrep -c "^.*$boot_key.*nvidia-drm.modeset=.*$")
		if [ $(cat /boot/grub2/grub.cfg| egrep -c "^.*$boot_key.*nvidia-drm.modeset=$nv_modeset.*$") -eq 0 ]; then
			if [ $(cat /boot/grub2/grub.cfg| egrep -c "^.*$boot_key.*blacklist=nouveau.*$") -eq 0 ]; then
				blacklist=' nouveau.modeset=0 rd.driver.blacklist=nouveau'
			fi
			if [ $cfg_modeset -gt 0 ]; then					
				modset='nvidia-drm.modeset='$nv_modeset$blacklist
			else
				modset=$blacklist
			fi
			## add nouveau blacklist to modeproe.d configs list.
			if ! [[ -s /etc/modprobe.d/blacklist-nouveau.conf ]]; then
				echo "blacklist nouveau" > /etc/modprobe.d/blacklist-nouveau.conf
			fi
			if [ $modeset_check -gt 0 ]; then
				sed -Eni -e "s|(linux.*$boot_key.*ro) (nvidia-drm.modeset=[0-9])(.*)$|\1 $modset\3|g;p" /boot/grub2/grub.cfg
			else
				sed -Eni -e "s|(linux.*$boot_key.*ro)(.*)$|\1 $modset \2|g;p" /boot/grub2/grub.cfg
			fi
			reboot_text='Grub has been modified for Nvidia Prime modesetting.\nPLease reboot the system for changes to take effect.'
		fi
	fi
}
bus_id_query(){
	## detect and config pci ids.
	bus_vga_list=$(lspci | grep VGA| awk '{print $1" "$5}'| sed -En "s|^.([0-9])\:.([0-9])\.([0-9])\ (.*)$|bus_\L\4=\1:\2:\3|p")
	export $bus_vga_list
}
clean_files() {
  files=(
    '/etc/X11/xorg.conf.d/00-avoid-glamor.conf'
    '/etc/X11/xorg.conf.d/99-nvidia.conf'
    '/etc/X11/xorg.conf'
  )
	## remove/backup unuseful files, but check if they exist first
	for file in "${files[@]}"; do
		if [[ -f $file ]]; then
			printf "Backing up: %s as %s\n" "$file" "$file.prime.bak"
			if [[ -s $file ]]; then cp "$file" "$file.prime.bak"; fi
			if [[ -s $file ]]; then rm -f "$file"; fi
		fi
	done
}
xrandr_outputs(){
	## xrandr have to be set as user wishes to give to script proper xrandr sets.
	## This is mandatory.
#	conf=nvidia
	ifs=$IFS
	IFS=$(echo -en "\n\b")
	for _dsp in ${connected_display[@]}; do
		echo "$_dsp"
		output_class=$(printf "$_dsp"|awk '{print $1}'| sed -En "s|^(\w*[A-Z])[-]?(.*)$|\1|p")
		output_num=$(printf "$_dsp"|awk '{print $1}'| sed -En "s|^(\w*[A-Z])[-]?(.*)$|\2|p")
		dash_cnt=$( dash=${_dsp//[^-]}; printf "${#dash}"; )
		if [[ $conf == nvidia ]]; then
			if [ $dash_cnt -eq 0 ]; then
				output_num=$output_num'-'$output_num
			fi
			connected_output=$output_class'-'$output_num
		else
			if [[ $_dsp =~ ^.*-.*$ ]]; then output_num=$(printf "$output_num"| cut -d'-' -f1); fi
			if [[ $output_class == VGA ]]; then output_num=1; fi
			connected_output=$output_class$output_num
		fi
		if [ $(xrandr --current| grep "$_dsp"| egrep -oc "[0-9]{3,4}[x]") -gt 0 ]; then
			if [[ $_dsp =~ ^VGA* ]]; then
				current_output=$(xrandr --current| grep "$_dsp"| sed -En "s|^(.*)\ (\(.*)$|\1|p")
			else
				current_output=$(xrandr --current| grep "$_dsp"| sed -En "s|^(.*[0-9]{3,4}[x].*)\ (\(.*)$|\1|p")
			fi
			check_primary_set=( $(echo -e $current_output| tr ' ' '\n') )
			
			if [ ${#check_primary_set[@]} -gt 3 ]; then rank=4; prim=' --primary'; else rank=3; prim=''; fi
			if ! [[ $connected_output =~ ^VGA ]]; then
				def_res=$(printf "$current_output"| cut -d' ' -f$rank)
				def_horiz=$(printf "$def_res"| sed -En "s|^(.*)x(.*)\+.*\+.*$|\1|p")
				def_verti=$(printf "$def_res"| sed -En "s|^(.*)x(.*)\+.*\+.*$|\2|p")
				def_pos=$(printf "$def_res"| sed -En "s|^.*x.*\+(.*\+.*)$|\1|;s|\+|x|p")
				## don't set display as primary at this step. this here basic xrandr display setting.
				## user have to set default primary at user session in case of multiple screen.
				enable_output='--output '$connected_output' --mode '$def_horiz'x'$def_verti' --pos '$def_pos$prim
				_outputs+=($enable_output)
			fi
		else
			disable_output=' --output '$connected_output' --off'
			_outputs+=($disable_output)
			_disabled+=($disable_output)
		fi
	done
	if [[ $conf == nvidia ]]; then
		if [ $(echo -e "${_outputs[*]}"| grep -c "VGA") -eq 0 ]; then
			disable_output='--output VGA-0 --off'
			_outputs+=($disable_output)
			_disabled+=($disable_output)
		fi
	fi
	IFS=$ifs
	xrandr_config="xrandr${_outputs[*]}"
	if [[ $conf == nvidia ]]; then
		xrandr_source='NVIDIA-0'
		xrandr_sink='modesetting'
	fi
	if [[ $conf == nvidia ]]; then
#		xrandr_init="xrandr --setprovideroutputsource $xrandr_sink $xrandr_source --auto --output VGA-0 --off"
		xrandr_init="xrandr --setprovideroutputsource $xrandr_sink $xrandr_source --auto ${_disabled[*]}"
	else
		xrandr_init=''
	fi
	echo -e "#! /bin/bash\n\n#sleep $delay\n$xrandr_init" > $install_dir/xinitrc.prime
	echo -e "#! /bin/bash\n\nsleep $delay\n$xrandr_config\n" > $install_dir/display.prime
	if [ $(stat -c %a $install_dir/display.prime) -ne 755 ]; then
		chmod 755 $install_dir/display.prime
	fi
	if [ $(stat -c %a $install_dir/xinitrc.prime) -ne 755 ]; then
		chmod 755 $install_dir/xinitrc.prime
	fi
}
session_manager(){
	home=/home/$(ls -l "$(pwd)"| cut -d' ' -f3 | sed -n "2p")	
	## configure each session manager if deteed: gdm kdm sddm lightdm
	session_list=(
	"lightdm,lightdm.conf,/etc/lightdm,.config/autostart,\[Seat:\*\],type.*local"
	"sddm,Xsetup,/usr/share/sddm/scripts,.config/autostart"
	"gdm,nvidia-session.desktop,/usr/share/gdm/greeter/autostart,.config/autostart"
	"kdm,Xsetup,/usr/share/config/kdm,.kde/share/autostart"
	"xdg,nvidia-session.desktop,/etc/xdg/autostart"
	)
	## loop on each session manager and configure as appropriate
	for _session in ${session_list[@]}; do
		session=$(printf "$_session"| cut -d"," -f1)
		session_conf=$(printf "$_session"| cut -d"," -f2)
		session_dir=$(printf "$_session"| cut -d"," -f3)
		session_local=$(printf "$_session"| cut -d"," -f4)
		conf_key=$(printf "$_session"| cut -d"," -f5)
		line_key=$(printf "$_session"| cut -d"," -f6)
		if [[ -d $session_dir ]]; then
			case $session in
				'lightdm')
					if ! [[ -s $session_dir/$session_conf.default ]]; then
						mv -f $session_dir/$session_conf $session_dir/$session_conf.default
						ln -sf $session_dir/$session_conf.default $session_dir/$session_conf
					fi
					case $ctrl_key in
						'nvidia')
							if [ $(cat $session_dir/$session_conf| grep -c "xinitrc.prime") -eq 0 ]; then
								if ! [[ -s $session_dir/$session_conf.prime ]]; then
									cp -f $session_dir/$session_conf.default $session_dir/$session_conf.prime
								fi
								if [ $(cat $session_dir/$session_conf.prime| grep -c "xinitrc.prime") -eq 0 ]; then
									if [ $(cat $session_dir/$session_conf.prime| grep -c "$conf_key") -gt 0 ]; then
										if [ $(cat $session_dir/$session_conf.prime| grep -c "$line_key") -gt 0 ]; then
											conf_line=$line_key
											local_conf="display-setup-script=$install_dir/xinitrc.prime"
										else
											conf_line=$conf_key
											local_conf="type=xlocal\ndisplay-setup-script=$install_dir/xinitrc.prime"
										fi
										sed -Eni "s|^[#]?($conf_line.*)$|\1\n$local_conf|g;p" $session_dir/$session_conf.prime
									else
										echo -e "[Seat:*]\ntype=xlocal\ndisplay-setup-script=$install_dir/xinitrc.prime"	>> $session_dir/$session_conf.prime
									fi
								fi
							fi
							ln -sf $session_dir/$session_conf.prime $session_dir/$session_conf
						;;
						'intel')
							ln -sf $session_dir/$session_conf.default $session_dir/$session_conf
						;;
					esac
				;;
				'gdm'|'xdg')
					case $ctrl_key in
					'nvidia')
						if ! [[ -h $session_dir/$session_conf ]]; then
							ln -sf $install_dir/$session_conf $session_dir/$session_conf
						fi
					;;
					'intel')
						if [[ -h $session_dir/$session_conf ]]; then
							rm -f $session_dir/$session_conf
						fi
					;;
					esac
				;;
				'kdm'|'sddm')
					case $ctrl_key in
					'nvidia')
						if ! [[ -h $session_dir/$session_conf ]]; then
							ln -sf $install_dir/xinitrc.prime $session_dir/$session_conf
						fi
					;;
					'intel')
						if ! [[ -h $session_dir/$session_conf ]]; then
							rm -f $session_dir/$session_conf
						fi
					;;
					esac
				;;
			esac
		fi
		if [[ -d $home/$session_local ]]; then
			if ! [[ -s $home/$session_local/nvidia-prime.desktop ]]; then
				cp -f $install_dir/nvidia-prime.desktop $home/$session_local
			fi
		fi
	done
}
abi_crtl(){
## enable xorg ABI23 behaviour to fix vsync and render. 
	if [[ $abi_ver && $abi_ver == 23 ]]; then
		if [ $(cat $install_dir/xorg.$ctrl_key.conf| grep -c "IgnoreABI" ) -eq 0 ]; then
			server_flag="Section \"ServerFlags\"\n\tOption\t\"IgnoreABI\" \"1\"\nEndSection"
			sed -Eni -e "s|^(## ABI config)$|\1\n$server_flag|g;p" $install_dir/xorg.$ctrl_key.conf
		fi
	fi
}
display_config(){
	if [[ $current_display ]]; then
		xrandr_outputs
		session_manager
	fi
	for vga_id in "nvidia" "intel"; do
		if [ $(cat $install_dir/xorg.$ctrl_key.conf|grep -oc "bus_$vga_id") -gt 0 ]; then
			eval bus_id='$'bus_$vga_id
			sed -ni -e "s|bus_$vga_id|$bus_id|g;p" $install_dir/xorg.$ctrl_key.conf
		fi
	done
	ln -sf $install_dir/xorg.$ctrl_key.conf /etc/X11/xorg.conf
}
go_for_nvidia(){
	clean_files
#	delay=5
	ctrl_key=nvidia
	display_config
	abi_crtl
	printf "$nv_drv_64" > $nvidia64_lib_file
	if [[ -d $nv_drv_32 ]]; then
		printf "$nv_drv_32" > $nvidia32_lib_file
	fi
	ldconfig
}
go_for_intel(){
	clean_files
	if [ $intel_nodelay -eq 1 ]; then delay=0; else delay=5; fi
	ctrl_key=intel
	display_config
}
go_default(){
	go_for_intel
	printf '/usr/lib64' > $nvidia64_lib_file
	if [[ -f $nvidia32_lib_file ]]; then
		printf '/usr/lib' > $nvidia32_lib_file
	fi
}
## configure grub for modesetting and blacklist all nouveau drivers.
# grub_config
bus_id_query
current=$(file -p /etc/X11/xorg.conf| sed -En "s|^.*xorg.(.*).conf$|\1|p")
if [[ -s /var/log/Xorg.0.log ]]; then
	abi_ver=$(cat /var/log/Xorg.0.log| sed -En "s|^.*ABI.*Driver.* ([0-9]{2})\..*$|\1|p"| uniq)
fi
case $1 in
	default ) go_default ;;
	nvidia ) go_for_nvidia ;;
	intel ) go_for_intel ;;
#	test) xrandr_outputs; exit 0;;
	*|help )
		printf "Usage:\t$(basename $0 ) intel|nvidia|default\n\n"
		printf "\tintel\t\tSwitch to Intel GPU.\n"
		printf "\tnvidia\t\tSwitch to Nvidia GPU.\n"
		printf "\tdefault\t\tRescue to default throught commandline in case of XServer crash.\n"
		printf "\thelp\t\tthis help.\n"
		printf "\n\tYou need to logout from your session after each function.\n\n"
		exit 1
	;;
esac

#ldconfig
if [ $(file -p /etc/X11/xorg.conf| grep -c "xorg.$ctrl_key.conf") -gt 0 ]; then
	printf "\nSuccessfully switched to %s completed.\n" "$1"
	printf "Please logout for changes to take effect.\n"
else
	printf "\nSwitch to %s doesn't ended as expected\n" "$1"
	printf "Please, run script again or check custom values.\n"
fi	
